<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\Utils;

use App\Annotation\UploadableField;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\PropertyAccess\PropertyAccess;

/**
 * Class FileUploader.
 *
 * @author Romain Monteil <monteil.romain@gmail.com>
 */
class FileUploader
{
    private $uploadPath;

    private $accessor;

    public function __construct(string $uploadPath)
    {
        $this->uploadPath = $uploadPath;
        $this->accessor = PropertyAccess::createPropertyAccessor();
    }

    public function uploadFile($entity, string $property, UploadableField $annotation): void
    {
        $uploadedFile = $this->accessor->getValue($entity, $property);
        if ($uploadedFile instanceof UploadedFile) {
            $this->removeFile($entity, $annotation);

            $filename = $this->generateUniqueFileName().'.'.$uploadedFile->guessExtension();

            $file = $uploadedFile->move($this->getTargetDirectory($annotation), $filename);
            $this->accessor->setValue($entity, $annotation->getFilename(), $file->getFilename());
        } elseif ($uploadedFile instanceof File) {
            $this->accessor->setValue($entity, $annotation->getFilename(), $uploadedFile->getFilename());
        }
    }

    public function setFileFromFilename($entity, string $property, UploadableField $annotation): void
    {
        $file = $this->getFileFromFilename($entity, $annotation);
        if ($file instanceof File) {
            $this->accessor->setValue($entity, $property, $file);
        }
    }

    public function removeFile($entity, UploadableField $annotation): void
    {
        $file = $this->getFileFromFilename($entity, $annotation);
        if ($file instanceof File) {
            unlink($file->getRealPath());
        }
    }

    public function getTargetDirectory(UploadableField $annotation): string
    {
        return $this->uploadPath.\DIRECTORY_SEPARATOR.$annotation->getPath();
    }

    private function generateUniqueFileName(): string
    {
        // md5() reduces the similarity of the file names generated by uniqid(), which is based on timestamps
        return md5(uniqid('', true));
    }

    private function getFileFromFilename($entity, UploadableField $annotation): ?File
    {
        $filename = $this->accessor->getValue($entity, $annotation->getFilename());
        if (!empty($filename)) {
            $filePath = $this->getTargetDirectory($annotation).\DIRECTORY_SEPARATOR.$filename;
            if (is_file($filePath)) {
                return new File($filePath);
            }
        }

        return null;
    }
}
